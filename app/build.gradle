apply plugin: 'com.android.application'

/**
 * 打包时间
 */
def packageTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.xwj.toolbardemo"
        minSdkVersion 8
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"

        // 默认渠道 yingyongbao
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "yingyongbao"]
    }

    signingConfigs {
        //  debug config
        debug {  // default

        }

        release {
            //不推荐使用
//            storeFile file("../yourapp.keystore")
//            storePassword "your password"
//            keyAlias "your alias"
//            keyPassword "your password"
        }
    }

    buildTypes {
        //ref http://www.open-open.com/lib/view/open1428320744713.html
        debug {
            // 是否显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix ".debug"
            // 应用唯一id  方便你在同一个手机中安装debug版和release版本
            applicationIdSuffix ".debug"
            zipAlignEnabled false
            // 是否移除无用的resource文件
            shrinkResources false
            signingConfig signingConfigs.debug
            // 是否混淆
            minifyEnabled false
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            versionNameSuffix ".release"
            applicationIdSuffix ".release"
            zipAlignEnabled true
            // 慎用 配合minifyEnabled true 在getResources().getIdentifier(key, “drawable”,getPackageName()));中找不到资源
            shrinkResources true
            signingConfig signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    /**
     * 方式一
     */
//    productFlavors {
//        yingyongbao {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "yingyongbao"]
//        }
//        wandoujia {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
//        }
//        xiaomi {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
//        }
//        _360 {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "_360"]
//        }
//        huawei {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "huawei"]
//        }
//    }

    /**
     * 方式二 批量修改
     */
    productFlavors {

        yingyongbao {}
        //  wandoujia {}
        //  xiaomi {}
        //  _360 {}
        huawei {}

    }

    productFlavors {
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    /**
     *  修改最终生成的apk安装包的命名
     */
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                File outputDirectory = new File(outputFile.parent);
                def fileName
                if (variant.buildType.name == "release") {
                    // 输出apk名称为app_v1.0.0_2016-04-24_yingyongbao.apk
                    fileName = "app_v${defaultConfig.versionName}_${packageTime()}_${variant.productFlavors[0].name}.apk"
                } else {
                    fileName = "app_v${defaultConfig.versionName}_${packageTime()}_${variant.productFlavors[0].name}_debug.apk"
                }
                output.outputFile = new File(outputDirectory, fileName)
            }
        }
    }

}

/**
 * 为应用签名
 */
def propFile = project.rootProject.file('signing.properties');

if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD')
            && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:palette-v7:22.2.0'
    compile 'com.orhanobut:logger:1.11'
}
